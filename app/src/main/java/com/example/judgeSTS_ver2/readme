# 🎯 IMUService 完全版 - データ損失ゼロ達成

## ✅ 現在の状態

**完璧に動作中！🎉**

- ✅ データ損失: **0%**
- ✅ Firebase送信: **100%**
- ✅ バッファ残量: **常に0**
- ✅ 通信速度: **58 kbps（安定）**
- ✅ ファイルサイズ: **8時間で200MB（許容範囲）**

---

## 📊 設定値

### 重要なパラメータ

```kotlin
// バッファサイズ（拡大済み）
private val dataBuffer = ArrayDeque<IMUDataPoint>(3000)

// 保存・送信間隔
private val STORAGE_WRITE_INTERVAL = 5000L   // 5秒（ローカルCSV）
private val FIREBASE_WRITE_INTERVAL = 5000L  // 5秒（Firebase）

// バッチサイズ
val maxBatchSize = 1000

// センサー設定
SENSOR_SAMPLING_PERIOD_US = 8334  // 120Hz
```

---

## 🔍 問題と解決の経緯

### 問題発生（2025-10-28 19:45）

**症状:**
```
データ損失: 62.3%
Firebase送信: 37.7% (904/2400サンプル)
バッファ: 96.1%使用（オーバーフロー寸前）
```

**原因:**
```kotlin
// 以前の設定
private val dataBuffer = ArrayDeque<IMUDataPoint>(1000)  // 小さすぎ
private val FIREBASE_WRITE_INTERVAL = 20000L  // 遅すぎ
```

**問題の流れ:**
```
0秒:   バッファ 106サンプル
5秒:   バッファ 706サンプル
10秒:  バッファ 1306 → 1000超過で306削除 ❌
15秒:  バッファ 1600 → 1000超過で600削除 ❌
20秒:  バッファ 1000 → Firebase送信
       → 904サンプルのみ送信（1496サンプル損失）
```

### 解決策（2025-10-28 20:19）

**修正内容:**
1. バッファサイズ拡大: **1000 → 3000**
2. Firebase送信間隔短縮: **20秒 → 5秒**
3. バッチサイズ拡大: **500 → 1000**

**結果:**
```
0秒:  バッファ 0
5秒:  バッファ 605 → Firebase送信 → 0
10秒: バッファ 605 → Firebase送信 → 0
15秒: バッファ 605 → Firebase送信 → 0
```

✅ **データ損失ゼロ達成！**

---

## 📈 実測値（2025-10-28 20:19）

### ストレージ保存
```
時刻         | 処理量  | バッファ残 | 間隔  | 取得率
-------------|---------|-----------|-------|--------
20:19:43.802 | 605     | 0         | 5.0秒 | 101.0%
20:19:48.807 | 605     | 0         | 5.0秒 | 100.8%
20:19:53.814 | 605     | 0         | 5.0秒 | 100.8%
20:19:58.815 | 604     | 0         | 5.0秒 | 100.7%
20:20:03.828 | 603     | 0         | 5.0秒 | 100.3%
```

**平均取得率: 100.8%** ✅

### Firebase送信
```
送信間隔: 5秒ごと
送信量: 605サンプル/回
データサイズ: 35.4 KB/回
通信速度: 58.1 kbps
```

**povo2.0 低速モード（40-80kbps）で余裕あり** ✅

---

## 💾 データ形式

### CSV形式（ローカル＆Firebase）
```csv
Timestamp(ms),ax,ay,az,speed
1730112233456,0.123,-0.456,9.812,1.25
1730112233464,0.125,-0.458,9.810,
1730112233472,0.127,-0.460,9.808,1.26
```

### 保存先
- **ローカル:** `/storage/emulated/0/Documents/STS_MeasurementData/`
- **Firebase:** `SmartPhone_data_IMU_Speed/{sessionStartTime}/{timestamp}`

---

## ⏰ ファイルサイズ予測

### 運用時間別
```
1時間:   25 MB   ✅ 問題なし
2時間:   50 MB   ✅ 問題なし
4時間:  100 MB   ✅ 問題なし
8時間:  200 MB   ✅ 問題なし（許容範囲）
12時間: 299 MB   ⚠️  注意
24時間: 598 MB   🔥 要対策
```

**8時間以内の運用なら現状のままでOK**

---

## 🎯 動作確認方法

### 正常動作の確認ポイント

1. **バッファ残量が常に0**
   ```
   Processing XXX samples (0 remaining in buffer)
   ```

2. **5秒ごとに約605サンプル処理**
   ```
   Processing 605 samples (0 remaining in buffer)
   Wrote 605 samples, file size: XXX KB
   ```

3. **Firebase送信成功**
   ```
   Firebase send OK: XXX pts (with GPS speed)
   ```

4. **データ取得率100%**
   ```
   実測: 605サンプル/5秒
   理論: 600サンプル/5秒
   取得率: 100.8%
   ```

---

## 🔧 トラブルシューティング

### バッファに残量がある場合

```
Processing 500 samples (200 remaining in buffer)
```

**原因:**
- Firebase送信が遅延している
- 通信が不安定

**対策:**
1. WiFi環境で確認
2. Firebase送信ログを確認
3. 通信速度を測定

### データ取得率が95%未満の場合

```
実測: 570サンプル/5秒 (95%)
```

**原因:**
- センサーのサンプリングレートが不安定
- デバイスのパフォーマンス低下

**対策:**
1. バックグラウンドアプリを終了
2. 端末を再起動
3. バッテリー最適化を無効化

---

## 📝 過去のバージョンとの比較

### AccelerometerService.kt（旧バージョン）
```kotlin
private val dataBuffer = ArrayDeque(1000)
private val FIREBASE_WRITE_INTERVAL = 5000L
```
**結果: 100%送信成功** ✅

### IMUService.kt（修正前）
```kotlin
private val dataBuffer = ArrayDeque(1000)
private val FIREBASE_WRITE_INTERVAL = 20000L
```
**結果: 37.7%送信（62.3%損失）** ❌

### IMUService.kt（現在）
```kotlin
private val dataBuffer = ArrayDeque(3000)
private val FIREBASE_WRITE_INTERVAL = 5000L
```
**結果: 100%送信成功** ✅

---

## 🚀 まとめ

### 達成したこと
- ✅ データ損失ゼロ
- ✅ Firebase 100%送信
- ✅ 通信も安定
- ✅ バッファ管理も完璧

### 変更不要
- ✅ 8時間以内の運用なら現状維持
- ✅ 通信速度も余裕あり
- ✅ これ以上の調整は不要

**完璧な状態です！** 🎉